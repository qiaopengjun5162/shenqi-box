/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { TOKEN2022_NFT_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const MINT_NFT_DISCRIMINATOR = new Uint8Array([
  211, 57, 6, 167, 15, 219, 35, 251,
]);

export function getMintNftDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MINT_NFT_DISCRIMINATOR);
}

export type MintNftInstruction<
  TProgram extends string = typeof TOKEN2022_NFT_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountTokenAccount extends string | AccountMeta<string> = string,
  TAccountNftAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
  TAccountRent extends
    | string
    | AccountMeta<string> = "SysvarRent111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountMint extends string
        ? WritableSignerAccount<TAccountMint> & AccountSignerMeta<TAccountMint>
        : TAccountMint,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountNftAuthority extends string
        ? WritableAccount<TAccountNftAuthority>
        : TAccountNftAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type MintNftInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  symbol: string;
  uri: string;
};

export type MintNftInstructionDataArgs = {
  name: string;
  symbol: string;
  uri: string;
};

export function getMintNftInstructionDataEncoder(): Encoder<MintNftInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["name", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["symbol", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["uri", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: MINT_NFT_DISCRIMINATOR }),
  );
}

export function getMintNftInstructionDataDecoder(): Decoder<MintNftInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["name", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["symbol", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["uri", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getMintNftInstructionDataCodec(): Codec<
  MintNftInstructionDataArgs,
  MintNftInstructionData
> {
  return combineCodec(
    getMintNftInstructionDataEncoder(),
    getMintNftInstructionDataDecoder(),
  );
}

export type MintNftAsyncInput<
  TAccountSigner extends string = string,
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountNftAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  mint: TransactionSigner<TAccountMint>;
  tokenAccount: Address<TAccountTokenAccount>;
  nftAuthority?: Address<TAccountNftAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  rent?: Address<TAccountRent>;
  name: MintNftInstructionDataArgs["name"];
  symbol: MintNftInstructionDataArgs["symbol"];
  uri: MintNftInstructionDataArgs["uri"];
};

export async function getMintNftInstructionAsync<
  TAccountSigner extends string,
  TAccountMint extends string,
  TAccountTokenAccount extends string,
  TAccountNftAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof TOKEN2022_NFT_PROGRAM_ADDRESS,
>(
  input: MintNftAsyncInput<
    TAccountSigner,
    TAccountMint,
    TAccountTokenAccount,
    TAccountNftAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  MintNftInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountMint,
    TAccountTokenAccount,
    TAccountNftAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN2022_NFT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    nftAuthority: { value: input.nftAuthority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.nftAuthority.value) {
    accounts.nftAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            110, 102, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ]),
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb" as Address<"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb">;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" as Address<"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.nftAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getMintNftInstructionDataEncoder().encode(
      args as MintNftInstructionDataArgs,
    ),
  } as MintNftInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountMint,
    TAccountTokenAccount,
    TAccountNftAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type MintNftInput<
  TAccountSigner extends string = string,
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountNftAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  mint: TransactionSigner<TAccountMint>;
  tokenAccount: Address<TAccountTokenAccount>;
  nftAuthority: Address<TAccountNftAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  rent?: Address<TAccountRent>;
  name: MintNftInstructionDataArgs["name"];
  symbol: MintNftInstructionDataArgs["symbol"];
  uri: MintNftInstructionDataArgs["uri"];
};

export function getMintNftInstruction<
  TAccountSigner extends string,
  TAccountMint extends string,
  TAccountTokenAccount extends string,
  TAccountNftAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof TOKEN2022_NFT_PROGRAM_ADDRESS,
>(
  input: MintNftInput<
    TAccountSigner,
    TAccountMint,
    TAccountTokenAccount,
    TAccountNftAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): MintNftInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountMint,
  TAccountTokenAccount,
  TAccountNftAuthority,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN2022_NFT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    nftAuthority: { value: input.nftAuthority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb" as Address<"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb">;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" as Address<"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.nftAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getMintNftInstructionDataEncoder().encode(
      args as MintNftInstructionDataArgs,
    ),
  } as MintNftInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountMint,
    TAccountTokenAccount,
    TAccountNftAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedMintNftInstruction<
  TProgram extends string = typeof TOKEN2022_NFT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    mint: TAccountMetas[1];
    tokenAccount: TAccountMetas[2];
    nftAuthority: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    associatedTokenProgram: TAccountMetas[6];
    rent: TAccountMetas[7];
  };
  data: MintNftInstructionData;
};

export function parseMintNftInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedMintNftInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      mint: getNextAccount(),
      tokenAccount: getNextAccount(),
      nftAuthority: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getMintNftInstructionDataDecoder().decode(instruction.data),
  };
}
