/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from "@solana/kit";
import { type ParsedMintNftInstruction } from "../instructions";

export const TOKEN2022_NFT_PROGRAM_ADDRESS =
  "2PLQsLqv33ZAtLh4WA7BCnnXTNsrZEY3QBxhVDx8JZTe" as Address<"2PLQsLqv33ZAtLh4WA7BCnnXTNsrZEY3QBxhVDx8JZTe">;

export enum Token2022NftAccount {
  NftAuthority,
}

export function identifyToken2022NftAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): Token2022NftAccount {
  const data = "data" in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([194, 127, 219, 16, 219, 18, 250, 12]),
      ),
      0,
    )
  ) {
    return Token2022NftAccount.NftAuthority;
  }
  throw new Error(
    "The provided account could not be identified as a token2022Nft account.",
  );
}

export enum Token2022NftInstruction {
  MintNft,
}

export function identifyToken2022NftInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): Token2022NftInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 57, 6, 167, 15, 219, 35, 251]),
      ),
      0,
    )
  ) {
    return Token2022NftInstruction.MintNft;
  }
  throw new Error(
    "The provided instruction could not be identified as a token2022Nft instruction.",
  );
}

export type ParsedToken2022NftInstruction<
  TProgram extends string = "2PLQsLqv33ZAtLh4WA7BCnnXTNsrZEY3QBxhVDx8JZTe",
> = {
  instructionType: Token2022NftInstruction.MintNft;
} & ParsedMintNftInstruction<TProgram>;
