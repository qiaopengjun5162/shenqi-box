/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";

export const NFT_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  194, 127, 219, 16, 219, 18, 250, 12,
]);

export function getNftAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    NFT_AUTHORITY_DISCRIMINATOR,
  );
}

export type NftAuthority = { discriminator: ReadonlyUint8Array };

export type NftAuthorityArgs = {};

export function getNftAuthorityEncoder(): FixedSizeEncoder<NftAuthorityArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: NFT_AUTHORITY_DISCRIMINATOR }),
  );
}

export function getNftAuthorityDecoder(): FixedSizeDecoder<NftAuthority> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getNftAuthorityCodec(): FixedSizeCodec<
  NftAuthorityArgs,
  NftAuthority
> {
  return combineCodec(getNftAuthorityEncoder(), getNftAuthorityDecoder());
}

export function decodeNftAuthority<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<NftAuthority, TAddress>;
export function decodeNftAuthority<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<NftAuthority, TAddress>;
export function decodeNftAuthority<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<NftAuthority, TAddress> | MaybeAccount<NftAuthority, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getNftAuthorityDecoder(),
  );
}

export async function fetchNftAuthority<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<NftAuthority, TAddress>> {
  const maybeAccount = await fetchMaybeNftAuthority(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeNftAuthority<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<NftAuthority, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeNftAuthority(maybeAccount);
}

export async function fetchAllNftAuthority(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<NftAuthority>[]> {
  const maybeAccounts = await fetchAllMaybeNftAuthority(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeNftAuthority(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<NftAuthority>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeNftAuthority(maybeAccount));
}

export function getNftAuthoritySize(): number {
  return 8;
}
