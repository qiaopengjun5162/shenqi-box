{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-30T05:20:13.416Z",
    "end": "2025-08-30T05:20:15.855Z",
    "duration": 2439,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f2838a22-a2ee-4ea3-b67d-d7749ac58528",
      "title": "",
      "fullFile": "/Users/qiaopengjun/Code/Solana/shenqi-box/tests/token_2022_nft.ts",
      "file": "/tests/token_2022_nft.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "22e0f9eb-2dc9-4076-a938-1b4b41cdf598",
          "title": "token_2022_nft",
          "fullFile": "/Users/qiaopengjun/Code/Solana/shenqi-box/tests/token_2022_nft.ts",
          "file": "/tests/token_2022_nft.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "成功铸造一个 Token-2022 NFT!",
              "fullTitle": "token_2022_nft 成功铸造一个 Token-2022 NFT!",
              "timedOut": false,
              "duration": 2431,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // (新增) 检查余额并在需要时请求空投，增强测试的健壮性\n        const balance = yield connection.getBalance(wallet.publicKey);\n        // 如果余额低于 0.1 SOL，则请求 1 SOL\n        if (balance < 100000000) {\n            console.log(\"余额不足，正在请求空投...\");\n            const airdropSignature = yield connection.requestAirdrop(wallet.publicKey, 1000000000);\n            const latestBlockhash = yield connection.getLatestBlockhash();\n            yield connection.confirmTransaction({\n                blockhash: latestBlockhash.blockhash,\n                lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,\n                signature: airdropSignature,\n            });\n            console.log(\"空投成功!\");\n        }\n        // 定义 NFT 的元数据\n        const testName = \"Solana Gold\";\n        const testSymbol = \"GOLD\";\n        const testUri = \"https://example.com/nft.json\";\n        console.log(`NFT Mint 账户: ${mintKeypair.publicKey.toBase58()}`);\n        console.log(`接收者 ATA: ${associatedTokenAccount.toBase58()}`);\n        console.log(`NFT Authority PDA: ${nftAuthorityPda.toBase58()}`);\n        // --- 1. 调用链上程序的 mint_nft 指令 ---\n        const txSignature = yield program.methods\n            .mintNft(testName, testSymbol, testUri)\n            .accounts({\n            signer: wallet.publicKey,\n            mint: mintKeypair.publicKey,\n            tokenAccount: associatedTokenAccount,\n            nftAuthority: nftAuthorityPda,\n            systemProgram: anchor.web3.SystemProgram.programId,\n            tokenProgram: spl_token_1.TOKEN_2022_PROGRAM_ID,\n            associatedTokenProgram: anchor.utils.token.ASSOCIATED_PROGRAM_ID,\n            rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        })\n            .signers([mintKeypair]) // 因为 mint 是一个新账户，需要它的签名\n            .rpc();\n        console.log(\"交易签名:\", txSignature);\n        // 等待交易确认\n        const latestBlockhash = yield connection.getLatestBlockhash();\n        yield connection.confirmTransaction({\n            blockhash: latestBlockhash.blockhash,\n            lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,\n            signature: txSignature,\n        });\n        // --- 2. 验证链上状态 ---\n        // 2a. 获取并验证 Mint 账户的状态\n        // 等待一下确保账户已经创建\n        yield new Promise((resolve) => setTimeout(resolve, 2000));\n        const mintInfo = yield (0, spl_token_1.getMint)(connection, mintKeypair.publicKey, \"confirmed\", spl_token_1.TOKEN_2022_PROGRAM_ID);\n        // 验证 Mint 权限已被移除 (这是 NFT 的关键特征)\n        (0, chai_1.expect)(mintInfo.mintAuthority).to.be.null;\n        // 验证总供应量为 1\n        (0, chai_1.expect)(mintInfo.supply).to.equal(BigInt(1));\n        // 验证小数位为 0\n        (0, chai_1.expect)(mintInfo.decimals).to.equal(0);\n        // 2b. 从 Mint 账户中提取并验证元数据\n        const metadataPointer = (0, spl_token_1.getExtensionData)(spl_token_1.ExtensionType.MetadataPointer, mintInfo.tlvData);\n        console.log(\"Metadata pointer data:\", metadataPointer);\n        console.log(\"Metadata pointer length:\", metadataPointer.length);\n        // 我们的元数据存储在 Mint 账户自身\n        // metadataPointer is a Buffer, we need to read the PublicKey from it\n        if (metadataPointer && metadataPointer.length >= 32) {\n            // 只取前32字节作为公钥\n            const publicKeyBytes = metadataPointer.slice(0, 32);\n            const metadataAddress = new anchor.web3.PublicKey(publicKeyBytes);\n            console.log(\"Metadata address:\", metadataAddress.toBase58());\n            console.log(\"Expected mint address:\", mintKeypair.publicKey.toBase58());\n            // 检查 metadata pointer 是否指向 NFT Authority\n            (0, chai_1.expect)(metadataAddress.toBase58()).to.equal(nftAuthorityPda.toBase58());\n        }\n        else {\n            console.log(\"Metadata pointer is not a valid public key\");\n        }\n        // 解析元数据 - 从 mint 账户的 TLV 数据中读取\n        console.log(\"Mint TLV data length:\", mintInfo.tlvData.length);\n        // 找到元数据在 TLV 数据中的位置\n        // 跳过 metadata pointer 扩展，找到 metadata 扩展\n        let metadataStart = spl_token_1.TYPE_SIZE + spl_token_1.LENGTH_SIZE; // 跳过 metadata pointer\n        metadataStart += spl_token_1.TYPE_SIZE + spl_token_1.LENGTH_SIZE + 64; // 跳过 metadata pointer 数据\n        console.log(\"Metadata start position:\", metadataStart);\n        console.log(\"Remaining data length:\", mintInfo.tlvData.length - metadataStart);\n        // 解析元数据\n        const tokenMetadata = (0, spl_token_metadata_1.unpack)(mintInfo.tlvData.subarray(metadataStart));\n        // 验证元数据字段\n        (0, chai_1.expect)(tokenMetadata.name).to.equal(testName);\n        (0, chai_1.expect)(tokenMetadata.symbol).to.equal(testSymbol);\n        (0, chai_1.expect)(tokenMetadata.uri).to.equal(testUri);\n        // 验证自定义字段\n        const levelField = tokenMetadata.additionalMetadata.find((field) => field[0] === \"level\");\n        (0, chai_1.expect)(levelField).to.not.be.undefined;\n        (0, chai_1.expect)(levelField[1]).to.equal(\"1\");\n        console.log(\"✅ Mint 账户和元数据验证成功!\");\n        // 2c. 获取并验证接收者的 ATA 状态\n        const tokenAccountInfo = yield (0, spl_token_1.getAccount)(connection, associatedTokenAccount, \"confirmed\", spl_token_1.TOKEN_2022_PROGRAM_ID);\n        // 验证 ATA 中有 1 个代币\n        (0, chai_1.expect)(tokenAccountInfo.amount).to.equal(BigInt(1));\n        // 验证 ATA 的所有者是我们的测试钱包\n        (0, chai_1.expect)(tokenAccountInfo.owner).to.deep.equal(wallet.publicKey);\n        console.log(\"✅ 关联代币账户 (ATA) 验证成功!\");\n    })",
              "err": {},
              "uuid": "470c8a4a-35bf-48e6-9429-51710479fd48",
              "parentUUID": "22e0f9eb-2dc9-4076-a938-1b4b41cdf598",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": ["470c8a4a-35bf-48e6-9429-51710479fd48"],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2431,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1000000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
